
\documentclass{article}
\usepackage{Sweave}
\SweaveOpts{keep.source=TRUE}
\begin{document}
\title{Matching arrays using the pathway fingerprint v0.3 beta4 - hpc111 version}
\author{Gabriel Altschuler}
\maketitle

In this document we will test the ability of the fingerprint to pull out simliar arrays across platforms and species in the GEO corpus.
\\ The required data and metadata is contained within the R package \verb@pathprint@. We will use the \verb@pathprint.v.0.3.beta@ build in this session. In addition, we will make use of the tissue samples curated in \emph{Zilliox and Irizarry. A gene expression bar code for microarray data. Nat Meth (2007) vol. 4 (11) pp. 911-3}, a set of arrays from 6 tissues; muscle, lung, spleen, kidney, liver and brain.
\\ First we need to source the pathprint package and load the data libraries containing the fingerprint and the metadata. We will also load the tissue-specific data from a local file from the shared directory on \verb@hpc111@.
<<data>>=
library(pathprint.v0.3.beta4)
data(GEO.metadata.matrix)
data(GEO.fingerprint.matrix)
library(GEOmetadb)
con <- dbConnect(SQLite(),
  "/home/galtschu2/Documents/Databases/GEOmetadb/GEOmetadb.sqlite"
    )
###
# on local mac
#con <- dbConnect(SQLite(),
#  "/Users/GabrielAltschuler/Documents/Databases/GEOmetadb/GEOmetadb.sqlite"
#    )
###
gpl.species<-dbGetQuery(con, "select gpl, organism from gpl")
gpl.name<-dbGetQuery(con, "select gpl, title from gpl")
dbDisconnect(con)
GEO.metadata.matrix$platformSpecies<-gpl.species$organism[
  match(GEO.metadata.matrix$GPL, gpl.species$gpl)]
GEO.metadata.matrix<-GEO.metadata.matrix[
  GEO.metadata.matrix$Species == GEO.metadata.matrix$platformSpecies,]
# remove "B" arrays
GEO.metadata.matrix<-GEO.metadata.matrix[
  !(GEO.metadata.matrix$GPL %in% c("GPL340", "GPL97")),]

GEO.fingerprint.matrix<-GEO.fingerprint.matrix[,
  colnames(GEO.fingerprint.matrix) %in% GEO.metadata.matrix$GSM]
tissue.meta<-read.delim(
  "/data/shared/Fingerprint/curatedCellTypes/barcode_figure2_data.txt",
  stringsAsFactors = FALSE)
# if on local
#tissue.meta<-read.delim(
#  "/Users/GabrielAltschuler/Documents/Projects/Fingerprinting/barcode/output/barcode_figure2_data.txt",
#  stringsAsFactors = FALSE)
colnames(tissue.meta)
tissue.meta<-tissue.meta[tissue.meta$DB_ID %in% colnames(GEO.fingerprint.matrix),]
(tissues<-levels(as.factor(tissue.meta$Tissue)))
@
\pagebreak
\section{Tissue consensus fingerprints}
For each tissue, we will construct a "\emph{consensus fingerprint}", this is a pathway vector that contains \verb@1@ or \verb@-1@ at for pathways that have consistently high or low expression across all of the samples in the set and \verb@0@ otherwise, given a fractional threshold. This uses the pathprint functions \verb@consensusFingerprint@,  We will initailly set the threshold to 0.75.

<<tissueConsensus>>=
tissueConsensus<-sapply(tissues, function(x){
    consensusFingerprint(GEO.fingerprint.matrix[,
        tissue.meta$DB_ID[tissue.meta$Tissue == x]],
    threshold = 0.75)
    })
head(tissueConsensus)
@
We can now use the Manhattan distance as a measure of similiarity to each of these vectors for all of the arrays in the fingerprint corpus. The function \verb@consensusDistance@ is used to calculate the distances and approximate p-value.
<<tissueDistance>>=
tissueDistance<-apply(tissueConsensus, 2,
        consensusDistance, GEO.fingerprint.matrix)
@
An alternative method is to use the mean fingerprint and calculate the distance from this
The status outputs indicate the maximum manhattan distance possible based on the number of scored pathways in each consensus.
<<label=distHist,include=FALSE>>=
op<-par(mfrow = c(1,1), pty = "s")
par(mfcol = c(2,3))
brain.dist.hist<-hist(tissueDistance$brain[,"distance"],
    nclass = 50, xlim = c(0,1), main = "brain", xlab = "Scaled distance")
kidney.dist.hist<-hist(tissueDistance$kidney[,"distance"],
    nclass = 50, xlim = c(0,1), main = "kidney", xlab = "Scaled distance")
liver.dist.hist<-hist(tissueDistance$liver[,"distance"],
    nclass = 50, xlim = c(0,1), main = "liver", xlab = "Scaled distance")
lung.dist.hist<-hist(tissueDistance$lung[,"distance"],
    nclass = 50, xlim = c(0,1), main = "lung", xlab = "Scaled distance")
skeletalmuscle.dist.hist<-hist(tissueDistance$"skeletal muscle"[,"distance"],
    nclass = 50, xlim = c(0,1), main = "skeletal muscle", xlab = "Scaled distance")
spleen.dist.hist<-hist(tissueDistance$spleen[,"distance"],
    nclass = 50, xlim = c(0,1), main = "spleen", xlab = "Scaled distance")
par(op)
@
<<label=distHistsub,include=FALSE>>=
hist(tissueDistance$brain[
        tissue.meta$DB_ID[tissue.meta$Tissue == "brain"],
        "distance"],
    breaks = brain.dist.hist$breaks,
    xlim = c(0,1), main = "", xlab = "Scaled distance")
#par(op)
@
\newpage
\begin{figure}
\begin{center}
<<label=distHistPlot,fig=TRUE,echo=FALSE>>=
<<distHist>>
@
\end{center}
\caption{Histograms of the distance from the tissue consensus of all GEO samples}
\begin{center}
<<label=distHistsubPlot,fig=TRUE,echo=FALSE>>=
<<distHistsub>>
@
\end{center}
\caption{Histograms of the distance from the brain consensus of the brain tissues that made up the consensus signature.}
\label{fig:brainHist}
\end{figure}
Figure \ref{fig:brainHist} shows a histogram of the distances from the brain consensus for the full corpus and for the brain tissues that made up the signature. This can also be represented as a table. Or we can extract the top ranking arrays for a particular platform, e.g. what are the closest matched \emph{Danio Rerio} or \emph{Rattus norvegicus} arrays to the human/mouse brain and liver consensus?
<<ZfishBrain>>=
brain.meta<-cbind(tissueDistance$brain,
              GEO.metadata.matrix[
                match(rownames(tissueDistance$brain),
                GEO.metadata.matrix$GSM)
              ,])

Dr.brain.match<-head(brain.meta[
                      brain.meta$Species == "Danio rerio",
                      c(1,2,5,6,8)
                    ],20)
@
<<ZfishLiver>>=
liver.meta<-cbind(tissueDistance$liver,
              GEO.metadata.matrix[
                match(rownames(tissueDistance$liver),
                GEO.metadata.matrix$GSM)
              ,])

Dr.liver.match<-head(liver.meta[
                    liver.meta$Species == "Danio rerio",
                    c(1,2,5,6,8)
                  ],20)
@
<<RatBrain>>=
Rn.brain.match<-head(brain.meta[
                    brain.meta$Species == "Rattus norvegicus",
                    c(1,2,5,6,8)
                  ],20)
@
<<RatLiver>>=
Rn.liver.match<-head(liver.meta[
                    liver.meta$Species == "Rattus norvegicus",
                    c(1,2,5,6,8)
                  ],20)
@

<<label=ZfishBrainTab,echo=FALSE,results=tex>>=
library(xtable)
print(xtable(Dr.brain.match, caption = "Human/mouse brain - zebrafish matches", label = "Tab_ZfishBrain",
digits = 3), table.placement = "tbp", caption.placement = "top", size = 5)
print(xtable(Rn.brain.match, caption = "Human/mouse brain - rat matches", label = "Tab_RatBrain",
digits = 3), table.placement = "tbp", caption.placement = "top", size = 5)
print(xtable(Dr.liver.match, caption = "Human/mouse liver - zebrafish matches", label = "Tab_ZfishLiver",
digits = 3), table.placement = "tbp", caption.placement = "top", size = 5)
print(xtable(Rn.liver.match, caption = "Human/mouse liver - rat matches", label = "Tab_RatLiver",
digits = 3), table.placement = "tbp", caption.placement = "top", size = 5)
@
\pagebreak
\section{Precision-recall of matching arrays}
Next step is to quantify this - or show top arrays matching in each species or platform. For example, how many brain samples are there with p<0.02. To do this we need to collect the metadata across the full corpus. This will be done in a rough way by collecting \emph{terms} or keywords related with specific tissues and seraching the source, chararcteristics and title for any of these \emph{terms}. The top 7500 arrays for each tissue were manually re-curated to ensure that the \emph{terms} set was appropriate. In addition, specific GSEs that had insufficient metadata to identify the source were individually examined. These were assigned on a case by case basis.

<<defineTerms>>=
brain.terms<-c(
  "brain", "Amygdala", "Cortex","Lobe", "hippocamp",
  "putamen", "hypothalamus", "Hypothlamus", "cerebellum", "Striatum",
  "DLPFC", "cerebellum","medulla", "Gyrus",
  "Glioblastoma", "Accumbens", "astrocytoma", "Medulloblastoma",
  "oligodendrogliomas","cerebrum", "Ventral tegmental", "cerebrum",
  "stria terminalis", "periaqueductal gray", "thalamus", "cerebellar",
  "substantia_nigra", "Caudate", "ventral tegmental area",
  "vestibular_nuclei_superior", "ventral_tegmental_area",
  "Gloubus Pallidum", "Globus pallidus", "subthalamic_nucleus", "corpus_callosum",
  "Substantia Nigra", "spinal", "nodose_nucleus", "corticotectal",
  "Paraventricular", "cortical neurons", "pons", "callosal", "oculomotor nucleus",
  "Lateral geniculate nucleus","pituitary_gland", "trigeminal_ganglia",
  "dorsal_root_ganglia", "pars tuberalis", "neuroblastoma", "dorsal root ganglion",
  "Supraoptic nucleus", "glioma", "astrocytes", "pineal gland",
  "3ARS02080774b_globus_pallidus"
               )
brain.GSE<-c("GSE9443","GSE11100", "GSE15222", "GSE9566", "GSE13041", "GSE2817",
             "GSE19402", "GSE4206","GSE17617", "GSE13353", "GSE4623", "GSE2547",
             "GSE19332", "GSE6614")
kidney.terms<-c("kidney", "renal", "glomerulus", "renal", "Papillary", "RCC")
kidney.GSE<-c("GSE7869", "GSE5243", "GSE13065", "GSE5243", "GSE7869", "GSE1563")
liver.terms<-c("liver", "hepatocellular", "hepatocyte", "Hepatic", "hepatocytes",
               "s854 2dpf GFP+", "s854 3dpf GFP+", "s854 4dpf GFP+", "s854 6dpf GFP+",
               "cholangiocarcinoma", "HepaRG")
liver.GSE<-c("GSE6632", "GSE10493", "GSE6903", "GSE9012", "GSE4285", "GSE4740",
             "GSE1088", "GSE1089", "GSE14712")
lung.terms<-c("lung", "bronchus", "NSCLC", "Bronchial")
lung.GSE<-c("GSE11056", "GSE11809", "GSE18083", "GSE7670", "GSE6135", "GSE4512",
            "GSE21581")
muscle.terms<-c(
  "skeletal muscle", "Proximal muscle", "vastus lateralis", "Biceps Brachii",
  "vastus laterlis", "Quadricep", "skeletal_muscle", "Paravertebral",
  "Deltoid", "Rectus femoris", "triceps", "superior rectus", "Vastus Lateralus",
  "Gastrocnemius", "Flexor carpi", "tibialis cranialis", "tibialis anterior",
  "calf muscle", "carpi radialis brevis", "gracillus", "tibialis anterior muscle",
  "gracilis", "latissimus dorsi", "Soleus muscle", "muscle", "Tongue", "heart",
  "diaphragm", "Intestine", "atrial", "ventricular",  "Cardiac", "Ventricle",
  "Cardiomyocytes", "Anterior tibialis")
muscle.GSE<-c("GSM397580", "GSM397583", "GSE1551", "GSE1764", "GSE80", "GSE12580",
              "GSE21610", "GSE897", "GSE3307", "GSE6970")
spleen.terms<-c("spleen", "splen", "lymph")
spleen.GSE<-c("GSE24350", "GSE6980", "GSE24350", "GSE16059", "GSM541854")
tissue.terms<-list(
  brain.terms, kidney.terms, liver.terms, lung.terms, muscle.terms, spleen.terms
    )
tissue.GSE<-list(brain.GSE, kidney.GSE, liver.GSE, lung.GSE, muscle.GSE, spleen.GSE)
names(tissue.terms)<-tissues
names(tissue.GSE)<-tissues
@
<<Quantification>>=
tissue.distance<-vector("list", length(tissues))
tissueDistance.meta<-lapply(tissues, function(x){
  cbind(tissueDistance[[x]],
          GEO.metadata.matrix[
            match(rownames(tissueDistance[[x]]),
            GEO.metadata.matrix$GSM)
              ,])})
names(tissueDistance.meta)<-tissues

for (i in 1:length(tissues)){
  tissue<-tissues[i]
  print(tissue)
  tissueDistance.meta[[tissue]]$valid<-(rowSums(
  sapply(tissue.terms[[tissue]], function(x){
    grepl(x, apply(
            tissueDistance.meta[[tissue]][, c("Title", "Source", "Characteristics")],
            1, function(y){
                      paste(y, collapse = " ")
                      }
                  ), ignore.case = TRUE)
      })
  ) > 0)
  tissueDistance.meta[[tissue]]$valid[
      tissueDistance.meta[[tissue]]$GSE %in% tissue.GSE[[tissue]]
      ]<-1
  }
# write tables for supplementary data
for (i in tissues){
  write.table(tissueDistance.meta[[i]][,c("GSM", "GSE", "GPL", "Title", "valid", "distance")], file = paste(i, "retrievalTable.txt", sep = ""), quote = FALSE, sep = "\t")
}
@
We can use this to calculate the mean average precision and plot the data as a histogram of the distance overlayed with precision, or as percision-recall plots
<<MeanAveragedPrecision>>=
MAP<-sapply(tissues, function(x){
mean(
  (cumsum(tissueDistance.meta[[x]]$valid)/(1:length(tissueDistance.meta[[x]]$valid)))[
    (tissueDistance.meta[[x]]$valid == 1)
    ])})
MAP
@
\begin{figure}
\begin{center}
<<label=histplots, fig = TRUE, echo = TRUE>>=
par(mfcol = c(2,3))
for (i in 1:length(tissues)){
hist(tissueDistance[[i]][,"distance"],
    breaks = seq(0,1,(sum(abs(2*tissueConsensus[,i])))^(-1)),
    xlim = c(0,1), main = tissues[[i]], xlab = "Scaled distance", ylab = "")
par(new = TRUE)
plot(tissueDistance.meta[[i]]$distance,
     (cumsum(tissueDistance.meta[[i]]$valid)/(1:length(tissueDistance.meta[[i]]$valid))),
     ylim = c(0,1), xlim = c(0,1),
     xaxt = "n", yaxt = "n", xlab = "",
     ylab = "", type = "l", col = "red")
axis(4)
}
@
\end{center}
\caption{Frequency histograms of this distribution of the distance of the GEO corpus from each tissue consensus fingerprint (black, left axis), and the associtated retrieval precision (red, right axis)}
\label{fig:hist}
\end{figure}

<<precision.recall.GEO>>=
precision.recall.tissues<-lapply(tissues, function(x){
  data.frame(
    recall = (
      cumsum(tissueDistance.meta[[x]]$valid)/sum(tissueDistance.meta[[x]]$valid)
        ),
    precision = (
      cumsum(tissueDistance.meta[[x]]$valid)/(1:length(tissueDistance.meta[[x]]$valid))
        )
            )
  })
names(precision.recall.tissues)<-tissues
precision.recall.tissues.std<-lapply(precision.recall.tissues, function(z){
  approx(
                x = z$recall,
                y = z$precision,
                xout = seq(0.01, 1, 0.01),
                rule = 2
                )$y
  })
@

\begin{figure}
\begin{center}
<<label=PRplot, fig = TRUE, echo = TRUE>>=
plot.new()
axis(1, seq(0,1,0.2))
axis(2, seq(0,1,0.2))
title(xlab = "recall", ylab = "precision")
for (i in 1:length(tissues)){
tissue<-tissues[i]
lines(x = seq(0.01, 1, 0.01), y = precision.recall.tissues.std[[tissue]],
      col = rainbow(6)[i])
}
legend(x = "topright", tissues,
        text.col = rainbow(6)[1:6], bty= "n", cex = 0.75)
@
\end{center}
\caption{Precision-recall curves for matched tissue retrieval from the GEO database}
\label{fig:PRtissues}
\end{figure}

Finally the results can be summarized as a table

<<precisionTables>>=
# create table at 95% and 90% precision
top95.table<-as.data.frame(matrix(nrow = length(tissues), ncol = 4))
rownames(top95.table)<-tissues
colnames(top95.table)<-c("Seed arrays", "Correct retrievals", "Platforms", "Species")
top95.table$"Seed arrays"<-table(tissue.meta$Tissue)[tissues]
for (i in tissues){
  top95<-precision.recall.tissues[[i]]$precision > 0.95
  top95.correct<-(top95 & (tissueDistance.meta[[i]]$valid ==1))
  top95.table[i,"Correct retrievals"]<-sum(top95.correct)
  top95.table[i,"Platforms"]<-length(
    table(tissueDistance.meta[[i]]$GPL[top95.correct])
    )
  top95.table[i,"Species"]<-length(
    table(tissueDistance.meta[[i]]$Species[top95.correct])
    )
}

top90.table<-as.data.frame(matrix(nrow = length(tissues), ncol = 4))
rownames(top90.table)<-tissues
colnames(top90.table)<-c("Seed arrays", "Correct retrievals", "Platforms", "Species")
top90.table$"Seed arrays"<-table(tissue.meta$Tissue)[tissues]
for (i in tissues){
  top90<-precision.recall.tissues[[i]]$precision > 0.9
  top90.correct<-(top90 & (tissueDistance.meta[[i]]$valid ==1))
  top90.table[i,"Correct retrievals"]<-sum(top90.correct)
  top90.table[i,"Platforms"]<-length(
    table(tissueDistance.meta[[i]]$GPL[top90.correct])
    )
  top90.table[i,"Species"]<-length(
    table(tissueDistance.meta[[i]]$Species[top90.correct])
    )
}
@
\pagebreak
<<label=tissueTab,echo=FALSE,results=tex>>=
library(xtable)
print(xtable(top95.table, caption = "Tissue retrieval 95pct precision", label = "Tab_top95",
digits = 3), table.placement = "tbp", caption.placement = "bottom", size = 5)
print(xtable(top90.table, caption = "Tissue retrieval 90pct precision", label = "Tab_top90",
digits = 3), table.placement = "tbp", caption.placement = "bottom", size = 5)
@
\pagebreak
\section{Assigning a p-value to consensusDistance in the Pathprint package}
In considering the distribution of distances from a consensus fingerprint, a major problem is how to assign a measure of significance. This is particularly important if it is necessary to impose a cutoff at which to evaluate retrieved results. Calculating significance based on the distribution of fingerprint scores across the full GEO corpus is complicated as a) each pathway has a different distribution of ternary scores and b) the pathways scores are known to be correlated. An alternative strategy is to use the distribution of the corpus to define a background distribution, based on the following crude assumptions.
\begin{itemize}
\item The scores distribution is composed of two distinct populations; phenotypically matched and non-matched samples.
\item The distances of the non-matched samples are normally distributed.
\item The number of true phenotypicaly matched samples is negligible relative to the size of the corpus.
\end{itemize}
Thus, a p-value associated with a given distance can be calculated using the distribution function of N($\mu$, $\sigma$) where $\mu$ and $\sigma$ are the mean and standard deviation of the distances of all arrays in the fingerprint database. However, often the third assumption is not valid and the distribution is skewed. In this case, the estimated $\mu$ and $\sigma$ for the non-matched samples are not appropriate. To account for this an alternative is to use a trimmed mean to estimate $\mu$ and the inter-quartile range to estimate $\sigma$.
\subsection{Model data}
We can demonstrate the issue using a model dataset, composed of two independent normal distributions.
<<function>>=
pnorm.trim<-function(x, ...){
# function to estimate a fit to the normal
# distribution based on the interquartile range
  mean.trim.q <- mean(x, trim = 0.25)
   IQR<-quantile(x, 0.75) - quantile(x, 0.25)
 	sd.trim.q<-IQR/(2*qnorm(0.75))	
 	pnorm(x, mean = mean.trim.q, sd = sd.trim.q, ...)
 	}
@
<<data>>=
x<-c(rnorm(1000, 20,5), rnorm(100,2,1))
background.x<-
  dnorm(1:round(max(x)),
            mean = mean(x),
            sd = sd(x)
      )
background.x.trim<-
  dnorm(1:round(max(x)),
            mean = mean(x, trim = 0.25),
            sd = (quantile(x, 0.75) - quantile(x, 0.25))/(2*qnorm(0.75))
      )
@
\begin{figure}
\begin{center}
<<qqplot, fig = TRUE, echo = TRUE>>=
qqnorm(x)
qqline(x, col = "red")
@
\end{center}
\caption{Normal Q-Q plot for simulated bi-modal data, the red line passes through the first and third quartiles}
\label{fig:qqplot}
\end{figure}
A qqplot of the data, figure~\ref{fig:qqplot} demonstrates that data within the inter-quartile range is approximately normally distributed.
\begin{figure}
\begin{center}
<<distplot1, fig = TRUE, echo = TRUE>>=
plot(density(x)$x, density(x)$y/max(density(x)$y), type = "l", xlab = "x", ylab = "Density or P-value")
lines(background.x/max(background.x), col = "blue")
lines(background.x.trim/max(background.x.trim), col = "red")            
lines(x[order(x)], pnorm(x, mean(x), sd(x))[order(x)], col = "blue", lty = 2)
lines(x[order(x)], pnorm.trim(x)[order(x)], col = "red", lty = 2)

plot(density(x)$x, density(x)$y/max(density(x)$y), type = "l", xlab = "x", ylab = "Density or P-value", log = "y")
lines(background.x/max(background.x), col = "blue")
lines(background.x.trim/max(background.x.trim), col = "red")            
lines(x[order(x)], pnorm(x, mean(x), sd(x))[order(x)], col = "blue", lty = 2)
lines(x[order(x)], pnorm.trim(x)[order(x)], col = "red", lty = 2)
@
\end{center}
\caption{Density plot for simulated bi-modal data, with background esitmation based on N($\mu$, $\sigma$) for the full data (blue) and the IQR (red). Dotted lines indicate p-values calculated based on these distributions, plotted with linear scale}
\label{fig:distplot1}
\end{figure}
\begin{figure}
\begin{center}
<<distplot2, fig = TRUE, echo = TRUE>>=
plot(density(x)$x, density(x)$y/max(density(x)$y), type = "l", xlab = "x", ylab = "Density or P-value", log = "y")
lines(background.x/max(background.x), col = "blue")
lines(background.x.trim/max(background.x.trim), col = "red")            
lines(x[order(x)], pnorm(x, mean(x), sd(x))[order(x)], col = "blue", lty = 2)
lines(x[order(x)], pnorm.trim(x)[order(x)], col = "red", lty = 2)
@
\end{center}
\caption{Density plot for simulated bi-modal data, with background esitmation based on N($\mu$, $\sigma$) for the full data (blue) and the IQR (red). Dotted lines indicate p-values calculated based on these distributions, plotted with log scale}
\label{fig:distplot2}
\end{figure}
\subsection{Tissue-specific data}
We can benchmark these measures using the precision. N.B. p-values are calculated within the \verb@pathprint@ package function \verb@consensusDistance@. The POE has been pre-calculated as the run-time is long (a few hours).
<<POE>>=
try(load("/data/shared/Fingerprint/tissueDistanceExample_beta4.RData"))
if(is.null(tissueDistance[[1]]$POE)){
library(metaArray)
for (i in tissues){
  fit<-fit.em(tissueDistance[[i]][,"distance"],
            cl = rep(0,length(tissueDistance[[i]][,"distance"]))
            )
  tissueDistance[[i]]$POE<-fit$expr
}
save(tissueDistance, file = "/data/shared/Fingerprint/tissueDistanceExample_beta4.RData")
}
@
\begin{figure}
\begin{center}
<<label=POEplot, fig = TRUE, echo = TRUE>>=
par(mfcol = c(3,2))
for (i in tissues){
plot(tissueDistance[[i]]$POE,
    (cumsum(tissueDistance.meta[[i]]$valid)/(1:length(tissueDistance.meta[[i]]$valid))),
    type = "l", main = i, xlab = "POE", ylab = "Precision", xlim = c(-1,1))
}
@
\end{center}
\caption{Plot of precision against POE for tissue retrieval from the GEO corpus}
\label{fig:POE}
\end{figure}

\begin{figure}
\begin{center}
<<label=Pvalueplot, fig = TRUE, echo = TRUE>>=
par(mfcol = c(3,2))
for (i in tissues){
plot(-log(tissueDistance[[i]]$pvalue,10),
    (cumsum(tissueDistance.meta[[i]]$valid)/(1:length(tissueDistance.meta[[i]]$valid))),
    type = "l", main = i, xlab = "-log P-value", ylab = "Precision", xlim = c(0,4))
}
@
\end{center}
\caption{Plot of precision against basic P-value for tissue retrieval from the GEO corpus}
\label{fig:Pvalue}
\end{figure}

\begin{figure}
\begin{center}
<<label=trimPvalueplot, fig = TRUE, echo = TRUE>>=
par(mfcol = c(3,2))
for (i in tissues){
plot(-log(pnorm.trim(tissueDistance[[i]]$distance),10),
    (cumsum(tissueDistance.meta[[i]]$valid)/(1:length(tissueDistance.meta[[i]]$valid))),
    type = "l", main = i, xlab = "-log P-value", ylab = "Precision", xlim = c(0,4))
}
@
\end{center}
\caption{Plot of precision against trimmed distribution P-value for tissue retrieval from the GEO corpus}
\label{fig:trimPvalue}
\end{figure}

It is instructive to compare the precision levels at a P-value of 0.01
<<precision_pval>>=
precision.pval.0.01<-sapply(tissues, function(x){
  (cumsum(tissueDistance.meta[[x]]$valid)/(1:length(tissueDistance.meta[[x]]$valid)))[
    which.min(abs(tissueDistance[[x]]$pvalue - 0.01))
    ]})
precision.pval.0.05<-sapply(tissues, function(x){
  (cumsum(tissueDistance.meta[[x]]$valid)/(1:length(tissueDistance.meta[[x]]$valid)))[
    which.min(abs(tissueDistance[[x]]$pvalue - 0.05))
    ]})
precision.pval.0.01
precision.pval.0.05
@
<<precision_pval>>=
trim.precision.pval.0.01<-sapply(tissues, function(x){
  (cumsum(tissueDistance.meta[[x]]$valid)/(1:length(tissueDistance.meta[[x]]$valid)))[
    which.min(abs(pnorm.trim(tissueDistance[[i]]$distance) - 0.01))
    ]})
trim.precision.pval.0.05<-sapply(tissues, function(x){
  (cumsum(tissueDistance.meta[[x]]$valid)/(1:length(tissueDistance.meta[[x]]$valid)))[
    which.min(abs(pnorm.trim(tissueDistance[[i]]$distance) - 0.05))
    ]})
trim.precision.pval.0.01
trim.precision.pval.0.05
@
Clearly the estimation is not quite right at this stage. 
\end{document}