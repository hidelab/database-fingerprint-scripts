?pathprintTF
length(TFmodules.Hs.gs)
sum(grep("module", names(TFmodules.Hs.gs)))
sum(grep("Module", names(TFmodules.Hs.gs)))
names(TFmodules.Hs.gs)
?consensusFingerprint
pluripotent.consensus<-consensusFingerprint(#
GEO.fingerprintTF.matrix[,pluripotents.frame$GSM], threshold=0.9)#
#
# calculate distance from the pluripotent consensus#
geo.pluripotentDistance<-consensusDistance(pluripotent.consensus,#
GEO.fingerprintTF.matrix)#
#
# plot histograms#
par(mfcol = c(2,1), mar = c(0, 4, 4, 2))#
geo.pluripotentDistance.hist<-hist(geo.pluripotentDistance[,"distance"],#
nclass = 50, xlim = c(0,1), main = "Distance from pluripotent consensus")#
par(mar = c(7, 4, 4, 2))#
hist(geo.pluripotentDistance[pluripotents.frame$GSM, "distance"],#
breaks = geo.pluripotentDistance.hist$breaks, xlim = c(0,1), #
main = "", xlab = "above: all GEO, below: curated pluripotent samples")#
#
#
# annotate top 100 matches not in original seed with metadata#
geo.pluripotentDistance.noSeed<-geo.pluripotentDistance[#
!(rownames(geo.pluripotentDistance) %in% pluripotents.frame$GSM),#
]#
#
top.noSeed.meta<-GEO.metadata.matrixTF[#
match(head(rownames(geo.pluripotentDistance.noSeed), 1000),#
GEO.metadata.matrixTF$GSM),#
]#
head(top.noSeed.meta[,c("GSM", "GPL", "Source")],10)
head(top.noSeed.meta[,c("GSM", "GPL", "Source")],20)
head(top.noSeed.meta[,c("GSM", "GPL", "Source")],40)
pluripotent.consensus
pluripotent.consensus[pluripotent.consensus !=0]
pluripotent.consensus[pluripotent.consensus ==1]
pluripotent.consensus[pluripotent.consensus ==-1]
pluripotent.consensus[pluripotent.consensus ==1,]
pluripotent.consensus[pluripotent.consensus ==1]
as.data.frame(pluripotent.consensus[pluripotent.consensus ==1])
names(pluripotent.consensus)[pluripotent.consensus ==1]
as.data.frame(names(pluripotent.consensus)[pluripotent.consensus ==1])
sort(names(pluripotent.consensus)[pluripotent.consensus ==1])
as.data.frame(sort(names(pluripotent.consensus)[pluripotent.consensus ==1]))
getwd()
write.csv(as.data.frame(sort(names(pluripotent.consensus)[pluripotent.consensus ==1])), file = "temp.txt", row.names = F)
library(barcode)
library(frma)
source("http://bioconductor.org/biocLite.R")#
biocLite("frma")
biocLite("hgu133plus2frmavecs")
?all
biocLite("hgu133plus2barcodevecs")
biocLite("ggdendro")
install.packages("ggdendro")
install.packages(ggdendro)
library(ggdendro)
130+101+132+65+228+91+506+228+77+161
202+450+180+135+81+90+133+67
1338/202
(1-0.2)/(1+4)
202/1338
450/1338
(1-0.2)/(1+1.8)
(1/(1+1.8)
)
(1-0.2/(1.8)
)
(1-0.2/(12)
)
(1-0.2)/12
67/1338
(1-0.2)/(12+1)
(1-0.2)/(6.1+1)
133/1338
(1-0.2)/(6.1)
(1)/(6.1+1)
(1)/(6.1)
14029+9219+4609+1629+3259+10409+1802+5041
130+101+132+65+228+91+506+228
77+161+135+180+180+269+898+54
112+202+224+191+126+337+101
92+139+362+92+832+69+92
775+77+145+129+97+194+332
q()
armstrongNat.meta
library(pathprint)
Krivtsov.meta <- GEO.metadata.matrix[GEO.metadata.matrix$GSE %in% c("GSE3725"),]
Krivtsov.fingerprint <- GEO.fingerprint.matrix[, Krivtsov.meta$GSM]
library(GMAfunctions)
hyperPathway
?hyperPathway
q()
library(GMAfunctions)
?geo2fingerprint
library(pathprint)
?exprs2fingerprint
library(moe430a.db)
?GMAfunctions
?genesetConvert
?survivalAnalysis
library(pathprint)
names(chipframe)
str(chipframe)
sapply(chipframe, function(x){x$title})
?list
q()
library(pathprint)
lapply(chipframe)
sapply(chipframe, function(x){x$title})
(nChips <- sapply(names(chipframe), function(x){sum(GEO.metadata.matrix$GPL == x)}))
temp = (nChips <- sapply(names(chipframe), function(x){sum(GEO.metadata.matrix$GPL == x)}))
as.data.frame(temp)
names <-sapply(chipframe, function(x){x$title})
names
temp1<-as.data.frame(temp)
temp1[,"name"]<-names
temp1
library(phangorn)
?boot
?pahgorn
?phagorn
?phangorn
?bootstrap.pml
library(pathprint)
pathway.info<-as.data.frame(#
matrix(nrow = 6, ncol = 5,#
dimnames = list(c(names(genesets)[1:6]),#
c("nGenes", "MeanLength",#
"MedianLength", "MinLength", "MaxLength"#
))))#
for (i in rownames(pathway.info)){#
pathways<-get(genesets[i])#
pathway.info[i, "nGenes"] <- length(unique(unlist(pathways)))#
pathway.info[i, "MeanLength"] <- round(mean(sapply(pathways, length)),2)#
pathway.info[i, "MedianLength"] <- median(sapply(pathways, length))#
pathway.info[i, "MinLength"] <- min(sapply(pathways, length))#
pathway.info[i, "MaxLength"] <- max(sapply(pathways, length))#
}
par(mfcol = c(2,3))#
for (i in rownames(pathway.info)){#
pathways<-get(genesets[i])#
#hist(log(sapply(pathways, length),10), breaks = seq(0,3.2,0.2),#
#     xlim = c(0,log(1200, 10)))#
hist<-hist(sapply(pathways, length), breaks = c(0, 10^seq(-0.1,log(1400,10), 0.1)),#
plot = FALSE)#
plot(hist$counts ~ hist$mids, log = "x", type = "h", xaxt = "n",#
xlab = "Pathway size", ylab = "Frequency",#
main = i, xlim = c(0,max(10^seq(-0.1,log(1400,10)))))#
axis(1, hist$mids, round(hist$mids, 0))#
}
par(mfcol = c(2,3))#
for (i in rownames(pathway.info)){#
pathways<-get(genesets[i])#
#hist(log(sapply(pathways, length),10), breaks = seq(0,3.2,0.2),#
#     xlim = c(0,log(1200, 10)))#
hist<-hist(sapply(pathways, length), breaks = c(0, 10^seq(-0.1,log(1400,10), 0.1)),#
plot = FALSE)#
plot(hist$counts ~ hist$mids, log = "x", type = "h", xaxt = "n",#
xlab = "Pathway size", ylab = "Frequency",#
main = i, xlim = c(0,1400))#
axis(1, hist$mids, round(hist$mids, 0))#
}
plot(hist$counts ~ hist$mids, log = "x", type = "h", xaxt = "n",#
xlab = "Pathway size", ylab = "Frequency",#
main = i # xlim = c(0,1400)#
)
hist$mids
axis(1, hist$mids, round(hist$mids, 0))
par(mfcol = c(2,3))#
for (i in rownames(pathway.info)){#
pathways<-get(genesets[i])#
#hist(log(sapply(pathways, length),10), breaks = seq(0,3.2,0.2),#
#     xlim = c(0,log(1200, 10)))#
hist<-hist(sapply(pathways, length), breaks = c(0, 10^seq(-0.1,log(1400,10), 0.1)),#
plot = FALSE)#
plot(hist$counts ~ hist$mids, log = "x", type = "h", xaxt = "n",#
xlab = "Pathway size", ylab = "Frequency",#
main = i # xlim = c(0,1400)#
)#
axis(1, hist$mids, round(hist$mids, 0))#
}
par(mfcol = c(2,3))#
for (i in rownames(pathway.info)){#
pathways<-get(genesets[i])#
#hist(log(sapply(pathways, length),10), breaks = seq(0,3.2,0.2),#
#     xlim = c(0,log(1200, 10)))#
hist<-hist(sapply(pathways, length), breaks = c(0, 10^seq(-0.1,log(2400,10), 0.1)),#
plot = FALSE)#
plot(hist$counts ~ hist$mids, log = "x", type = "h", xaxt = "n",#
xlab = "Pathway size", ylab = "Frequency",#
main = i # xlim = c(0,1400)#
)#
axis(1, hist$mids, round(hist$mids, 0))#
}
par(mfcol = c(2,3))#
for (i in rownames(pathway.info)){#
pathways<-get(genesets[i])#
#hist(log(sapply(pathways, length),10), breaks = seq(0,3.2,0.2),#
#     xlim = c(0,log(1200, 10)))#
hist<-hist(sapply(pathways, length), breaks = c(0, 10^seq(-0.1,log(5000,10), 0.1)),#
plot = FALSE)#
plot(hist$counts ~ hist$mids, log = "x", type = "h", xaxt = "n",#
xlab = "Pathway size", ylab = "Frequency",#
main = i # xlim = c(0,1400)#
)#
axis(1, hist$mids, round(hist$mids, 0))#
}
round(hist$mids, 0)
round(hist$mids, 10)
round(hist$mids, 0)
signif(hist$mids, 0)
signif(hist$mids, 1)
signif(hist$mids, 4)
signif(hist$mids, 3)
signif(hist$mids, 2)
signif(hist$mids, 1)
signif(hist$mids, 2)
help signif
?signif
round(signif(hist$mids, 2))
trunc(hist$mids)
hist$mids
round(signif(hist$mids, 2))
par(mfcol = c(2,3))#
for (i in rownames(pathway.info)){#
pathways<-get(genesets[i])#
#hist(log(sapply(pathways, length),10), breaks = seq(0,3.2,0.2),#
#     xlim = c(0,log(1200, 10)))#
hist<-hist(sapply(pathways, length), breaks = c(0, 10^seq(-0.1,log(3000,10), 0.1)),#
plot = FALSE)#
plot(hist$counts ~ hist$mids, log = "x", type = "h", xaxt = "n",#
xlab = "Pathway size", ylab = "Frequency",#
main = i # xlim = c(0,1400)#
)#
axis(1, hist$mids, round(signif(hist$mids, 2)))#
}
q()
671+431+20+46
q()
library(pathprint)
dim(GEO.metadata.matrix)
compilePdf("~/Dropbox/fingerprint/documents/compilingPackage.Rnw")
q)
q()
log(0.05,10)
583*4
q()
library(GMAfunctions)
?GMAfunctions
q()
load("/Users/GabrielAltschuler/Documents/Projects/Fingerprinting/Brain/data/brain.data.RData")
ls()
head(brain.data)
write.csv(brain.data, "/Users/GabrielAltschuler/Documents/Projects/Fingerprinting/Manuscripts/Main publication/Re-submission May 2012/tables/Altschuler_TableS11.csv")
head(GPL96)
ls()
?try
ls()
library(pathprint)
library(pathprint)#
#
PLGC2.genes = unlist(pathprint.Hs.gs[grep("PLGC2", names(pathprint.Hs.gs))])
PLGC2.genes
names(pathprint.Hs.gs)
PLCG2.genes = unlist(pathprint.Hs.gs[grep("PLCG2", names(pathprint.Hs.gs))])
PLCG2.genes
library(org.Hs.eg.db)
PLCG2.genes.symbol = unlist(mget(PLCG2.genes, org.Hs.egSYMBOL, ifnotfound = NA))
PLCG2.genes.symbol
unlist(PLCG2.genes.symbol)
names(PLCG2.genes.symbol)<-NULL
unlist(PLCG2.genes.symbol)
RAN.genes = unlist(pathprint.Hs.gs[grep("RAN", names(pathprint.Hs.gs))])
pathprint.Hs.gs[grep("RAN", names(pathprint.Hs.gs))]
RAN.genes = unlist(pathprint.Hs.gs[grep("RAN,17", names(pathprint.Hs.gs))])#
#
RAN.genes.symbol = unlist(mget(RAN.genes, org.Hs.egSYMBOL, ifnotfound = NA))
RAN.genes.symbol
translation.genes = unlist(pathprint.Hs.gs[grep("Translation factors", names(pathprint.Hs.gs))])
names(pathprint.Hs.gs[grep("Translation factors", names(pathprint.Hs.gs))])
names(pathprint.Hs.gs[grep("ranslation factors", names(pathprint.Hs.gs))])
grep("ranslation factors", names(pathprint.Hs.gs))
grep("ranslation", names(pathprint.Hs.gs))
names(pathprint.Hs.gs[grep("ranslation", names(pathprint.Hs.gs))])
translation.genes = unlist(pathprint.Hs.gs[grep("Translation Factors", names(pathprint.Hs.gs))])
#
translation.genes
translation.genes.symbol = unlist(mget(translation.genes, org.Hs.egSYMBOL, ifnotfound = NA))
translation.genes.symbol
names(translation.genes.symbol)<-NULL
translation.genes.symbol
grep("GPCR", names(pathprint.Hs.gs))]
[grep("GPCR", names(pathprint.Hs.gs))]
grep("GPCR", names(pathprint.Hs.gs))
names(pathprint.Hs.gs)[]grep("GPCR", names(pathprint.Hs.gs))
names(pathprint.Hs.gs)[grep("GPCR", names(pathprint.Hs.gs))]
GPCR.genes = unlist(pathprint.Hs.gs[grep("GPCRs, Class B Secretin-like (Wikipathways)", names(pathprint.Hs.gs))])
#
GPCR.genes.symbol = unlist(mget(GPCR.genes, org.Hs.egSYMBOL, ifnotfound = NA))
names(GPCR.genes.symbol)<-NULL
GPCR.genes.symbol
length(GPCR.genes.symbol)
GPCR.genes
grep("GPCRs, Class B Secretin-like (Wikipathways)", names(pathprint.Hs.gs)
)
names(pathprint.Hs.gs)[grep("GPCR", names(pathprint.Hs.gs))]
GPCR.genes = unlist(pathprint.Hs.gs[grep("GPCRs, Class B", names(pathprint.Hs.gs))])
GPCR.genes
GPCR.genes.symbol = unlist(mget(GPCR.genes, org.Hs.egSYMBOL, ifnotfound = NA))
names(GPCR.genes.symbol)<-NULL
GPCR.genes.symbol
getwd()
setwd("/Users/GabrielAltschuler/Documents/Projects/Fingerprinting/LeukemiaAnalysis/output")
write.delim(GPCR.genes.symbol, "GPCR.txt")
write.table(GPCR.genes.symbol, file = "GPCR.txt")
write.table(GPCR.genes.symbol, file = "GPCR.txt", quote = F, row.names = F, col.names = F)
write.table(PLCG2.genes.symbol, file = "PLCG2.txt", quote = F, row.names = F, col.names = F)
write.table(translation.genes.symbol, file = "translation.txt", quote = F, row.names = F, col.names = F)
write.table(RAN.genes.symbol, file = "RAN.txt", quote = F, row.names = F, col.names = F)
write.table(GPCR.genes.symbol, file = "GPCR.txt", quote = F, row.names = F, col.names = F)
library(pathprint)
length(unique(unlist(pathprint.Hs.gs)))
library(pathprintTF)
length(unique(unlist(pathprintTF.Hs.gs)))
library(pathprintTF)
?pathprintTF
length(unique(unlist(TFmodules.Hs.gs)))
pathprintGenes <- unique(unlist(pathprint.Hs.gs))
pathprintTFGenes<-unique(unlist(TFmodules.Hs.gs))
length(setdiff(pathprintTFGenes, pathprintGenes))
length(union(pathprintTFGenes, pathprintGenes))
396.17/1.6
55000/2
18375/2
255.7-216.3
216.3-55.7
-13.97
160.6-13.97
146.63/216.3
library(GMAfunctions)
nexus
Nexus
options(width=60)#
options(SweaveHooks=list(fig=function()#
      par(mar=c(1.1, 1.1, 1.1, 1.1)))#
        )#
options(continue=" ")
library(pathprint)#
# load data#
tissueData<-read.delim("tissueData.txt", stringsAsFactors = FALSE)#
# subset for data present in the fingerprint matrix#
tissueData<-tissueData[tissueData$GSM %in% GEO.metadata.matrix$GSM,]
setwd("/Users/GabrielAltschuler/Dropbox/database-fingerprint-scripts/Reports")
library(pathprint)#
# load data#
tissueData<-read.delim("tissueData.txt", stringsAsFactors = FALSE)#
# subset for data present in the fingerprint matrix#
tissueData<-tissueData[tissueData$GSM %in% GEO.metadata.matrix$GSM,]
tissueData$Type<-paste(tissueData$Tissue, tissueData$Platform, sep = "_")#
types<-unique(tissueData$Type)#
typeConsensus<-sapply(types, function(x){#
    consensusFingerprint(GEO.fingerprint.matrix[,#
        tissueData$GSM[tissueData$Type == x]],#
    threshold = 0.9)#
    })
tissues<-unique(tissueData$Tissue)#
tissuesConsensus<-sapply(tissues, function(x){#
    consensusFingerprint(GEO.fingerprint.matrix[,#
        tissueData$GSM[tissueData$Tissue == x]],#
    threshold = 0.99)#
    })#
#
# identify pathways unique to each tissue or tissue/platform combination#
tissuesConsensus.unique<-apply(tissuesConsensus, 1, function(x){min(table(x)) == 1})#
typeConsensus.unique<-apply(typeConsensus, 1, function(x){min(table(x)) %in% c(2,3,4)})
heatmap(typeConsensus[#
  (tissuesConsensus.unique & typeConsensus.unique),]#
        , mar = c(10,20), scale = "none",#
       Colv = full$Colv, col = c("blue", "white", "red"),#
        cexCol = 0.75, cexRow = 0.7)
typeConsensus.SD<-apply(typeConsensus, 1, sd)#
full<-heatmap(typeConsensus[typeConsensus.SD > 0,], mar = c(10,10), scale = "none",#
              keep.dendro = TRUE, col = c("blue", "white", "red"),#
              cexCol = 0.75, cexRow = 0.5)
tissues<-unique(tissueData$Tissue)#
tissuesConsensus<-sapply(tissues, function(x){#
    consensusFingerprint(GEO.fingerprint.matrix[,#
        tissueData$GSM[tissueData$Tissue == x]],#
    threshold = 0.99)#
    })
tissuesConsensus.unique<-apply(tissuesConsensus, 1, function(x){min(table(x)) == 1})#
typeConsensus.unique<-apply(typeConsensus, 1, function(x){min(table(x)) %in% c(2,3,4)})
heatmap(typeConsensus[#
  (tissuesConsensus.unique & typeConsensus.unique),]#
        , mar = c(10,20), scale = "none",#
       Colv = full$Colv, col = c("blue", "white", "red"),#
        cexCol = 0.75, cexRow = 0.7)
library(pheatmap)#
names<-rownames(typeConsensus)#
names[grep("Respiratory electron transport", names)]<-#
                    "Respiratory electron transport (Reactome)"#
matrix<-typeConsensus[#
  (tissuesConsensus.unique & typeConsensus.unique),]#
rownames(matrix)<-names[#
  (tissuesConsensus.unique & typeConsensus.unique)]
pheatmap(matrix, col = c("blue", "white", "red"),#
        cexCol = 0.75, cexRow = 0.7, fontsize = 8,#
         cellwidth = 5, cellheight = 5, legend = FALSE#
         )
pheatmap(typeConsensus,#
        # mar = c(10,20), scale = "none",#
       #Colv = full$Colv,#
         col = c("blue", "white", "red"),#
        fontsize = 10,#
         cellwidth = 10, #cellheight = 10,#
         legend = FALSE, show_rownames = F,#
         border_color = NA#
         )
pheatmap(typeConsensus,#
        # mar = c(10,20), scale = "none",#
       #Colv = full$Colv,#
         col = c("blue", "white", "red"),#
        fontsize = 10,#
         cellwidth = 10, #cellheight = 10,#
         legend = FALSE, show_rownames = F,#
         border_color = NA#
         )
pheatmap(matrix, col = c("blue", "white", "red"),#
        cexCol = 0.75, cexRow = 0.7, fontsize = 8,#
         cellwidth = 5, cellheight = 5, legend = FALSE#
         )
head(matrix)
dim(matrix())
dim(matrix)
rownames(matrix)
pheatmap(matrix[c(grep("Wikipathways", rownames(matrix)),#
                  grep("Reactome", rownames(matrix))),#
                ],#
         col = c("blue", "white", "red"),#
         cexCol = 0.75, cexRow = 0.7, fontsize = 8,#
         cellwidth = 5, cellheight = 5, legend = FALSE#
         )
pheatmap(matrix[c(grep("Wikipathways", rownames(matrix)),#
                  grep("Reactome", rownames(matrix))),#
                ],#
         col = c("blue", "white", "red"),#
         cexCol = 0.75, cexRow = 0.7, fontsize = 8,#
         cellwidth = 10, cellheight = 10, legend = FALSE#
         )
getwd()
q()
