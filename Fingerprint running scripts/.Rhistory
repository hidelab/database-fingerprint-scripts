testMatrix = brain.fingerprints.sub[,i, drop = FALSE],
recallMatrix = brain.fingerprints.sub[,-i],
testClass = class[i],
recallClass = class[-i]
)
PR.brain[,i]<-approx(
x = PR$recall,
y = PR$precision,
xout = seq(0.01, 1, 0.01),
rule = 2
)$y
av.precision[i]<-attr(PR, "Av.precision")
}
?pathprint.v0.3.beta4
function(consensus, fingerprintframe)
# function to calculate distance from a consensus fingerprint, accounting only for significant pathawys in the consensus
# consensus - consensus fingerprint
# fingerprintframe - dataframe of fingerprints from which the distance will be calculated
# returns vector with names = colnames(fingerprintFrame)
# scale by max distance (2 x length of the consensus)
# returns a p-value, based on an assumption of a normally distributed fingerprintframe
{
# subset so that only significant pathawys in the conensus are used
consensus.sub <- consensus[abs(consensus) > 0]
consensus.length <- length(consensus.sub)
frame.sub <- fingerprintframe[abs(consensus) > 0,]
# calculate the distance
frame.distance <- frame.sub - consensus.sub
# sum over pathways
distance<-colSums(abs(frame.distance), na.rm = TRUE)
# scale against max length
print(paste("Scaling against max length,", (2 * consensus.length)))
scaled.distance <- distance/(2 * consensus.length)
# order and return
sorted.scaled.distance<-sort(scaled.distance)
# now calculate p-values, based on assumption that sorted.scaled.distance is normally distributed
mean.dist<-mean(sorted.scaled.distance)
sd.dist<-sd(sorted.scaled.distance)
pvals<-pnorm(sorted.scaled.distance, mean = mean.dist, sd = sd.dist)
return(data.frame(distance = sorted.scaled.distance, pvalue = pvals))
}
for (i in 1:ncol(brain.fingerprints.sub)){
PR <- precisionRecall(
testMatrix = brain.fingerprints.sub[,i, drop = FALSE],
recallMatrix = brain.fingerprints.sub[,-i],
testClass = class[i],
recallClass = class[-i]
)
PR.brain[,i]<-approx(
x = PR$recall,
y = PR$precision,
xout = seq(0.01, 1, 0.01),
rule = 2
)$y
av.precision[i]<-attr(PR, "Av.precision")
}
## The function is currently defined as
function(fingerprintframe, threshold)
# Produce a consensus fingerprint. For each pathway, the consesnsus fingerprint is
# 1 if either the mean of the fingerprints exceed a certain threshold,
# -1 if they fall below -threshold,
# 0 otherwise
{
if (threshold < 0) stop("threshold must be positive")
mean.frame <- apply(fingerprintframe, 1, mean) # create mean fingerprint
consensus <- rep(0, nrow(fingerprintframe)) # initiate consenssu vector
if (!(length(consensus) == length(mean.frame))) stop("Error")
names(consensus) <- names(mean.frame)
consensus[mean.frame > threshold] <- 1 # fill with pathways passing threshold
consensus[mean.frame < (-threshold)] <- (-1)
return (consensus)
}
consensusDistance<-function(consensus, fingerprintframe)
# function to calculate distance from a consensus fingerprint, accounting only for significant pathawys in the consensus
# consensus - consensus fingerprint
# fingerprintframe - dataframe of fingerprints from which the distance will be calculated
# returns vector with names = colnames(fingerprintFrame)
# scale by max distance (2 x length of the consensus)
# returns a p-value, based on an assumption of a normally distributed fingerprintframe
{
# subset so that only significant pathawys in the conensus are used
consensus.sub <- consensus[abs(consensus) > 0]
consensus.length <- length(consensus.sub)
frame.sub <- fingerprintframe[abs(consensus) > 0,]
# calculate the distance
frame.distance <- frame.sub - consensus.sub
# sum over pathways
distance<-colSums(abs(frame.distance), na.rm = TRUE)
# scale against max length
print(paste("Scaling against max length,", (2 * consensus.length)))
scaled.distance <- distance/(2 * consensus.length)
# order and return
sorted.scaled.distance<-sort(scaled.distance)
# now calculate p-values, based on assumption that sorted.scaled.distance is normally distributed
mean.dist<-mean(sorted.scaled.distance)
sd.dist<-sd(sorted.scaled.distance)
pvals<-pnorm(sorted.scaled.distance, mean = mean.dist, sd = sd.dist)
return(data.frame(distance = sorted.scaled.distance, pvalue = pvals))
}
for (i in 1:ncol(brain.fingerprints.sub)){
PR <- precisionRecall(
testMatrix = brain.fingerprints.sub[,i, drop = FALSE],
recallMatrix = brain.fingerprints.sub[,-i],
testClass = class[i],
recallClass = class[-i]
)
PR.brain[,i]<-approx(
x = PR$recall,
y = PR$precision,
xout = seq(0.01, 1, 0.01),
rule = 2
)$y
av.precision[i]<-attr(PR, "Av.precision")
}
i
brain.fingerprints.sub[,i, drop = FALSE]
consensusDistance
na.match<-which(is.na(brain.fingerprints.sub), arr.ind = TRUE)
brain.fingerprints.sub.naRm<-brain.fingerprints.sub[
-unique(na.match[,"row"]),]
brain.pc<-prcomp(t(brain.fingerprints.sub.naRm))
PR.brain<-matrix(nrow = 100, ncol = ncol(brain.fingerprints.sub.naRm))
colnames(PR.brain)<-colnames(brain.fingerprints.sub.naRm)
av.precision<-vector("numeric", ncol(brain.fingerprints.sub.naRm))
class<-brain.data.sub$Type
names(class)<-brain.data.sub$GSM
for (i in 1:ncol(brain.fingerprints.sub.naRm)){
PR <- precisionRecall(
testMatrix = brain.fingerprints.sub.naRm[,i, drop = FALSE],
recallMatrix = brain.fingerprints.sub.naRm[,-i],
testClass = class[i],
recallClass = class[-i]
)
PR.brain[,i]<-approx(
x = PR$recall,
y = PR$precision,
xout = seq(0.01, 1, 0.01),
rule = 2
)$y
av.precision[i]<-attr(PR, "Av.precision")
}
PR.brain<-rowMeans(PR.brain)
attr(PR.brain, "mean.av.precision") <- mean(av.precision)
plot(x = seq(0.01, 1, 0.01), y = PR.brain)
PR.brain
compilePdf("~/Dropbox/database-fingerprint-scripts/Reports/pathwayStats.Rnw")
rownames(GEO.fingerprint.matrix)[grep("iabetes", rownames(GEO.fingerprint.matrix))]
rownames(GEO.fingerprint.matrix)[grep("B cell", rownames(GEO.fingerprint.matrix))]
rownames(GEO.fingerprint.matrix)[grep("beta cell", rownames(GEO.fingerprint.matrix))]
rownames(GEO.fingerprint.matrix)[grep("beta", rownames(GEO.fingerprint.matrix))]
temp.p<-c("Regulation of beta-cell development (Reactome)", "Maturity onset diabetes of the young (KEGG)")
temp<-GEO.fingerprint.matrix[rownames(GEO.fingerprint.matrix) %in% temp.p,]
temp.1<-colsums(temp)
temp.1<-rowSums(temp)
table(temp.1)
dim(temp)
length(temp.1)
head(temp.1)
temp.1<-rowSums(temp, rm.na = TRUE)
temp.1<-rowSums(temp, na.rm = TRUE)
table(temp.1)
heda(tmep)
head(temp)
temp.1<-colSums(temp, rm.na = TRUE)
temp.1<-colSums(temp, na.rm = TRUE)
head(temp.1)
table(temp)
table(temp.1)
plot(x = seq(0.01, 1, 0.01), y = PR.brain)
plot(x = seq(0.01, 1, 0.01), y = PR.brain, ylim = c(0,1))
q()
library(limma)
?limma
library(pathprint.v0.3.beta4)
?pathprint.v0.3.beta4
library(igraph)
library(BioNet)
?BioNet
q()
library(pathprint)
?pathprint
library(GMAfunctinos)
library(GMAfunctions)
?GMAfunctions
? exprs2fingerprint_options
?single.chip.enrichment
library(pathprint)
GEOsamples.new<-GEO.metadata.matrix$GSM
head(GEOsamples.new)
print(paste(length(GEOsamples.new), "to be fingerprinted", sep = " "))
GEOsamples.rand <- sample(GEOsamples.new)
len <- length(GEOsamples.rand) %/% 14
library(pathprint)
chipframe
names(chipframe)
intersect("GPL570", names(chipframe))
intersect("GPL97", names(chipframe))
GEOsamples.new<-GEO.metadata.matrix$GSM[GEO.metadata.matrix$GSE %in% names(chipframe)]
length(GEOsamples.new)
 names(chipframe)
GEOsamples.new<-GEO.metadata.matrix$GSM[GEO.metadata.matrix$GPL %in% names(chipframe)]
length(GEOsamples.new)
lapply(chipframe, function(x){chipframe$ann$})
str(chipframe)
lapply(chipframe, function(x){chipframe$title})
lapply(chipframe, function(x){x$title})
library(GEOquery)
?GEOquery
?dbGetQuery
q()
library(pathprint)
library(hgu133plus2.db)
str(chipframe)
GPL570genes <- unique(chipframe$GPL570$ann$EntrezID
)
pathprintGenes <- unique(unlist(pathprint.Hs.gs))
length(pathprintGenes)
length(GPL570genes)
length(intersect(GPL570genes, pathprintGenes))
library(pathprint)#
GPL570genes <- unique(chipframe$GPL570$ann$EntrezID)#
pathprintGenes <- unique(unlist(pathprint.Hs.gs))#
length(pathprintGenes)#
length(GPL570genes)#
length(intersect(GPL570genes, pathprintGenes))
library(pathprint)
diffPathways
?diffPathways
library(pathprint)
names(pathprint.Hs.gs)[grep("Wnt", names(pathprint.Hs.gs))]
intersect(pathprint.Hs.gs[["Signaling by Wnt (Reactome)"]], pathprint.Hs.gs[["Wnt Signaling Pathway (Wikipathways)"]])
intersect(pathprint.Hs.gs[["Signaling by Wnt (Reactome)"]], pathprint.Hs.gs[["Wnt Signaling Pathway NetPath (Wikipathways)"]])
intersect(pathprint.Hs.gs[["Signaling by Wnt (Reactome)"]], pathprint.Hs.gs[["Wnt Signaling Pathway and Pluripotency (Wikipathways)"]])
length(pathprint.Hs.gs[["Signaling by Wnt (Reactome)"]])
length(pathprint.Hs.gs[["Wnt Signaling Pathway NetPath (Wikipathways)"]])
library(org.Hs.eg.db)
unlist(mget(intersect(pathprint.Hs.gs[["Signaling by Wnt (Reactome)"]], pathprint.Hs.gs[["Wnt Signaling Pathway (Wikipathways)"]]), org.Hs.egSYMBOL, ifnotfound = NA)
)
unlist(mget(intersect(pathprint.Hs.gs[["Signaling by Wnt (Reactome)"]], org.Hs.egSYMBOL, ifnotfound = NA)
)
unlist(mget(pathprint.Hs.gs[["Signaling by Wnt (Reactome)"]], org.Hs.egSYMBOL, ifnotfound = NA))
unlist(mget(pathprint.Hs.gs[["Wnt Signaling Pathway NetPath (Wikipathways)"]], org.Hs.egSYMBOL, ifnotfound = NA))
3.428*0.184
1/(3.428*0.184)
1/(3.68*0.19)
(1 - (3.428*0.184)) / ()3.68 - 1)
(1 - (3.428*0.184)) / (3.68 - 1)
(3.68-1)/(1 - (3.428*0.184)) / (3.68 - 1)
(3.68-1)/((1 - (3.428*0.184)) / (3.68 - 1))
19.45/3.428
3.428/19.45
1/3.428
q()
q()
