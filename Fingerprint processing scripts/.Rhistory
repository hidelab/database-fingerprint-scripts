save(GEO.fingerprint.matrix, "/home/galtschu2/fingerprint/data/GEO.fingerprint.matrix.RData")
?sapply
# building pathprint R package
scripts<-c("exprs2fingerprint",
"consensusDistance",
"consensusFingerprint",
"customCDFAnn",
"diffPathways",
"exprs2fingerprint",
#          "meanFingerprint",
"single.chip.enrichment",
"thresholdFingerprint"
)
data<-c("chipframe",
"GEO.fingerprint.matrix",
"GEO.metadata.matrix",
"platform.thresholds",
"pluripotents.frame",
"genesets"
)
genesets<-c("pathprint.v0.3.Ce.gs",
"pathprint.v0.3.Dm.gs",
"pathprint.v0.3.Dr.gs",
"pathprint.v0.3.Hs.gs",
"pathprint.v0.3.Mm.gs",
"pathprint.v0.3.Rn.gs"
)
setwd("/Users/GabrielAltschuler/Dropbox/fingerprint")
sapply(scripts, function(x){source(paste("scripts/", x, ".R", sep = ""))})
sapply(data, function(x){load(paste("data/", x, ".RData", sep = ""), .GlobalEnv)})
sapply(genesets, function(x){load(paste("data/", x, sep = ""), .GlobalEnv)})
setwd("/Users/GabrielAltschuler/Documents/Projects/Fingerprinting/R_package/testArea/testPackage")
package.skeleton(list = c(scripts, data, genesets), name = "pathprint.v0.3.beta")
setwd("pathprint.v0.3.beta/man")
man<-dir()
for (i in 1:length(man)){
code<-paste("sh ../../shelltest/mansimple.sh", man[i], sep = " ")
system(code)
}
setwd("../..")
system("R CMD build pathprint.v0.3.beta")
?par
human.class<-human.data$Tissue
# building pathprint R package
scripts<-c("exprs2fingerprint",
"consensusDistance",
"consensusFingerprint",
"customCDFAnn",
"diffPathways",
"exprs2fingerprint",
#          "meanFingerprint",
"single.chip.enrichment",
"thresholdFingerprint"
)
data<-c("chipframe",
"GEO.fingerprint.matrix",
"GEO.metadata.matrix",
"platform.thresholds",
"pluripotents.frame",
"genesets"
)
genesets<-c("pathprint.v0.3.Ce.gs",
"pathprint.v0.3.Dm.gs",
"pathprint.v0.3.Dr.gs",
"pathprint.v0.3.Hs.gs",
"pathprint.v0.3.Mm.gs",
"pathprint.v0.3.Rn.gs"
)
setwd("/Users/GabrielAltschuler/Dropbox/fingerprint")
sapply(scripts, function(x){source(paste("scripts/", x, ".R", sep = ""))})
sapply(data, function(x){load(paste("data/", x, ".RData", sep = ""), .GlobalEnv)})
sapply(genesets, function(x){load(paste("data/", x, sep = ""), .GlobalEnv)})
setwd("/Users/GabrielAltschuler/Documents/Projects/Fingerprinting/R_package/testArea/testPackage")
package.skeleton(list = c(scripts, data, genesets), name = "pathprint.v0.3.beta")
?package.skeleton
package.skeleton(list = c(scripts, data, genesets), name = "pathprint.v0.3.beta", force = TRUE)
setwd("pathprint.v0.3.beta/man")
man<-dir()
for (i in 1:length(man)){
code<-paste("sh ../../shelltest/mansimple.sh", man[i], sep = " ")
system(code)
}
setwd("../..")
system("R CMD build pathprint.v0.3.beta")
getwd()
?remove.packages
39+34+164+83+2+17+1+4+3
?options
library(xtable)
?xtable
data(tli)
tli.table <- xtable(tli[1:20,])
digits(tli.table)[c(2,6)] <- 0
print(tli.table)
print(tli.table,type="html")
n <- seq(0.25, 0.25*30, 0.25)
n[1]
library(pathprint.v0.3.beta)
barcode.meta<-read.delim(
"/Users/GabrielAltschuler/Documents/Projects/
Fingerprinting/barcode/output/barcode_figure2_data.txt",
stringsAsFactors = FALSE)
barcode.meta<-read.delim(
"/Users/GabrielAltschuler/Documents/Projects/Fingerprinting/barcode/output/barcode_figure2_data.txt",
stringsAsFactors = FALSE)
q()
library(?pathprint.v0.3.beta)
library(pathprint.v0.3.beta)
single.chip.enrichment
temp<-read.delim("/Users/GabrielAltschuler/Documents/Projects/Fingerprinting/temp/Normalised")
head(temp)
rownames(temp)<-temp[,1]
temp<-temp[,-1]
head(temp)
library(pathprint)
temp.fingerprint<-exprs2fingerprint(temp, "GPL8321", "mouse")
head(temp.fingerprint)
CMP.consensus<-consensusFingerprint(temp.fingerprint[,c(1,2,3)])
CMP.consensus<-consensusFingerprint(temp.fingerprint[,c(1,2,3)], threshold = 0.9)
head(DMP.consensus)
head(CMP.consensus)
CMP.consensus
CMP.consensus<-consensusFingerprint(temp.fingerprint[,c(1,2,3)])
library(pathprint)
?pathprint
data(GEO.fingerprint.matrix)
dim(GEO.fingerprint.matrix)
data(chipframe)
length(chipframe)
?sample
names(chipframe)
symbols(x=coords[,1], y=coords[,2], bg=vertex.color, fg=vertex.frame.color,#
            squares=2*vertex.size, add=TRUE, inches=FALSE)
?symbols
require(stats); require(grDevices)#
x <- 1:10#
y <- sort(10*runif(10))#
z <- runif(10)#
z3 <- cbind(z, 2*runif(10), runif(10))#
symbols(x, y, thermometers=cbind(.5, 1, z), inches=.5, fg = 1:10)
symbols(x, y, stars=cbind(1, 1, 1), inches=.5, fg = 1:10)
symbols(x, y, stars=as.matrix(cbind(1, 1, 1)), inches=.5, fg = 1:10)
symbols(x, y, stars=as.matrix(rep(c(1, 1, 1),10),ncol = 3), inches=.5, fg = 1:10)
as.matrix(rep(c(1, 1, 1),10),ncol = 3)
as.matrix(rep(1,30),ncol = 3)
matrix(rep(1,30),ncol = 3)
symbols(x, y, stars=matrix(rep(1,30),ncol = 3), inches=.5, fg = 1:10)
symbols(x, y, stars=matrix(rep(1,40),ncol = 4), inches=.5, fg = 1:10)
symbols(x, y, stars=matrix(rep(1,4),ncol = 4), inches=.5, fg = 1:10)
symbols(x, y, stars=matrix(rep(1,60),ncol = 6), inches=.5, fg = 1:10)
symbols(x, y, stars=matrix(rep(1,40),ncol = 4), inches=.5, fg = 1:10)
symbols(x, y, stars=matrix(rep(1,100),ncol = 10), inches=.5, fg = 1:10)
symbols(x, y, stars=matrix(rep(1,30),ncol = 3), inches=.5, fg = 1:10)
symbols(x, y, stars=matrix(rep(1,100),ncol = 10), inches=.5, fg = 1:10)
symbols(x, y, stars=matrix(rep(1,30),ncol = 3), inches=.5, fg = 1:10)
symbols(x, y, stars=matrix(rep(1,40),ncol = 4), inches=.5, fg = 1:10)
remove.packages(igraph)
remove.packages("igraph")
library(igraph)
?vertex.shape
?vertex.shapes
?plot.igraph
g <- graph.ring(10)
plot(g)
plot(g, vertex.shapes = "diamond")
plot(g, vertex.shape = "diamond")
?symbols
remove.packages("igraph")
plot(g, vertex.shape = "diamond")
q()
temp<-c(1,2,3,4)
matrix(rep(temp, 4), ncol = 4)
remove.packages("igraph")
g <- graph.ring(10)
pchShow <-#
  function(extras = c("*",".", "o","O","0","+","-","|","%","#"),#
           cex = 3, ## good for both .Device=="postscript" and "x11"#
           col = "red3", bg = "gold", coltext = "brown", cextext = 1.2,#
           main = paste("plot symbols :  points (...  pch = *, cex =",#
                        cex,")"))
{#
    nex <- length(extras)#
    np  <- 26 + nex#
    ipch <- 0:(np-1)#
    k <- floor(sqrt(np))#
    dd <- c(-1,1)/2#
    rx <- dd + range(ix <- ipch %/% k)#
    ry <- dd + range(iy <- 3 + (k-1)- ipch %% k)#
    pch <- as.list(ipch) # list with integers & strings#
    if(nex > 0) pch[26+ 1:nex] <- as.list(extras)#
    plot(rx, ry, type="n", axes = FALSE, xlab = "", ylab = "",#
         main = main)#
    abline(v = ix, h = iy, col = "lightgray", lty = "dotted")#
    for(i in 1:np) {#
      pc <- pch[[i]]#
      ## 'col' symbols with a 'bg'-colored interior (where available) :#
      points(ix[i], iy[i], pch = pc, col = col, bg = bg, cex = cex)#
      if(cextext > 0)#
          text(ix[i] - 0.3, iy[i], pc, col = coltext, cex = cextext)#
    }#
  }
pchShow()
remove.packages("pathprint.v0.3.beta")
library(pathprint.v0.3.beta)
remove.packages("pathprint.v0.3.beta")
q()
library(pathprint.v0.3.beta)
library(pathprint.v0.3.beta2)
?pathprint.v0.3.beta2
Rprof(tmp <- tempfile())
test1<-geo2fingerprint("GSM27832", "KEGG and Wikipathways and static", enrichmentMethod = "SCE")
# Script for speed testing the fingerprint#
source("/home/galtschu2/Documents/Databases/gabriel functions.R")#
# Profile second time around as objects are loaded into the global environment the first time#
#
Rprof(tmp <- tempfile())#
test<-geo2fingerprint("GSM27832", "KEGG and Wikipathways and static", enrichmentMethod = "SCG")#
Rprof()#
summaryRprof(tmp)#
unlink(tmp)#
#
Rprof(tmp <- tempfile())#
test1<-geo2fingerprint("GSM27832", "KEGG and Wikipathways and static", enrichmentMethod = "SCE")#
Rprof()#
summaryRprof(tmp)#
unlink(tmp)#
#
# 19.38s vs 5.38s - significant improvement#
# compare 16.76 for single.chip.GSEA to 2.68 for single.chip.enrichment within the scripts#
# most of the time lag function in single chip enrichemnt (2.68) and customCDFAnn (0.84)#
# individual commands apply, mean, FUN and dir take up the most time#
# dir is a command that retrieves the full list of GEO files in a directory#
# if the GEO file is not found then it is downloaded#
# Not necessary repeatedly do this, better to load the list into the global environment#
# However, this means that this will have to be updated as well be the GEO loading script#
#
# updated so that the GEO directory data is only loaded once into the Global Environment#
#
Rprof(tmp <- tempfile())#
test1<-geo2fingerprint("GSM27832", "KEGG and Wikipathways and static", enrichmentMethod = "SCE")#
Rprof()#
summaryRprof(tmp)#
unlink(tmp)#
#
# great, now down to 3.78 seconds#
# also of note is that SCE returns a matrix while SCG returns a dataframe#
# matrices may be more efficient#
#
# updated script with alternative path to new chipframe, which includes Illumina arrays#
# test Illumina array fingerprint#
# Fingerprinting Illumina worked!#
#
Rprof(tmp <- tempfile())#
test2<-geo2fingerprint("GSM365199", "KEGG and Wikipathways and static", enrichmentMethod = "SCE")#
Rprof()#
summaryRprof(tmp)#
unlink(tmp)#
#
Rprof(tmp <- tempfile())#
test3<-geo2fingerprint("GSM365199", "KEGG and Wikipathways and static", enrichmentMethod = "SCG")#
Rprof()#
summaryRprof(tmp)#
unlink(tmp)
summaryRprof(tmp)#
unlink(tmp)
# Script for speed testing the fingerprint#
source("/home/galtschu2/Documents/Databases/gabriel functions.R")#
# Profile second time around as objects are loaded into the global environment the first time#
#
Rprof(tmp <- tempfile())#
test<-geo2fingerprint("GSM27832", "KEGG and Wikipathways and static", enrichmentMethod = "SCG")#
Rprof()#
summaryRprof(tmp)#
unlink(tmp)#
#
Rprof(tmp <- tempfile())#
test1<-geo2fingerprint("GSM27832", "KEGG and Wikipathways and static", enrichmentMethod = "SCE")#
Rprof()#
summaryRprof(tmp)#
unlink(tmp)#
#
# 19.38s vs 5.38s - significant improvement#
# compare 16.76 for single.chip.GSEA to 2.68 for single.chip.enrichment within the scripts#
# most of the time lag function in single chip enrichemnt (2.68) and customCDFAnn (0.84)#
# individual commands apply, mean, FUN and dir take up the most time#
# dir is a command that retrieves the full list of GEO files in a directory#
# if the GEO file is not found then it is downloaded#
# Not necessary repeatedly do this, better to load the list into the global environment#
# However, this means that this will have to be updated as well be the GEO loading script#
#
# updated so that the GEO directory data is only loaded once into the Global Environment#
#
Rprof(tmp <- tempfile())#
test1<-geo2fingerprint("GSM27832", "KEGG and Wikipathways and static", enrichmentMethod = "SCE")#
Rprof()#
summaryRprof(tmp)#
unlink(tmp)#
#
# great, now down to 3.78 seconds#
# also of note is that SCE returns a matrix while SCG returns a dataframe#
# matrices may be more efficient#
#
# updated script with alternative path to new chipframe, which includes Illumina arrays#
# test Illumina array fingerprint#
# Fingerprinting Illumina worked!#
#
Rprof(tmp <- tempfile())#
test2<-geo2fingerprint("GSM365199", "KEGG and Wikipathways and static", enrichmentMethod = "SCE")#
Rprof()#
summaryRprof(tmp)#
unlink(tmp)#
#
Rprof(tmp <- tempfile())#
test3<-geo2fingerprint("GSM365199", "KEGG and Wikipathways and static", enrichmentMethod = "SCG")#
Rprof()#
summaryRprof(tmp)#
unlink(tmp)
library(phangorn)
remove.packages("pathprintv0.3.beta2")
remove.packages("pathprint.v0.3.beta2")
q()
library(pathprint.v0.3.beta2)
q()
library(pathprint)
?pathprint
library(GMAfunctions)
temp<-1:10
exists('temp')
exists('chipframe')
str(genesets)
genesets
temp<-get(genesets[[1]])
str(temp)
names(temp)
names(get(geneset[1]))
names(get(genesets[1]))
names(get(genesets[[1]]))
names(get(genesets[1]))
genesets[1]
genesets[[1]]
q()
.ls.objects <- function (pos = 1, pattern, order.by,#
                        decreasing=FALSE, head=FALSE, n=5) {#
    napply <- function(names, fn) sapply(names, function(x)#
                                         fn(get(x, pos = pos)))#
    names <- ls(pos = pos, pattern = pattern)#
    obj.class <- napply(names, function(x) as.character(class(x))[1])#
    obj.mode <- napply(names, mode)#
    obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)#
    obj.size <- napply(names, object.size)#
    obj.dim <- t(napply(names, function(x)#
                        as.numeric(dim(x))[1:2]))#
    vec <- is.na(obj.dim)[, 1] & (obj.type != "function")#
    obj.dim[vec, 1] <- napply(names, length)[vec]#
    out <- data.frame(obj.type, obj.size, obj.dim)#
    names(out) <- c("Type", "Size", "Rows", "Columns")#
    if (!missing(order.by))#
        out <- out[order(out[[order.by]], decreasing=decreasing), ]#
    if (head)#
        out <- head(out, n)#
    out#
}#
# shorthand#
lsos <- function(..., n=10) {#
    .ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)#
}
lsos
ls)()
ls()
library(pathprint)
data(pathprint.Hs.gs)
ls()
lsos()
.ls.objects <- function (pos = 1, pattern, order.by,#
                        decreasing=FALSE, head=FALSE, n=5) {#
    napply <- function(names, fn) sapply(names, function(x)#
                                         fn(get(x, pos = pos)))#
    names <- ls(pos = pos, pattern = pattern)#
    obj.class <- napply(names, function(x) as.character(class(x))[1])#
    obj.mode <- napply(names, mode)#
    obj.type <- ifelse(is.na(obj.class), obj.mode, obj.class)#
    obj.prettysize <- napply(names, function(x) {#
                           capture.output(print(object.size(x), units = "auto")) })#
    obj.size <- napply(names, object.size)#
    obj.dim <- t(napply(names, function(x)#
                        as.numeric(dim(x))[1:2]))#
    vec <- is.na(obj.dim)[, 1] & (obj.type != "function")#
    obj.dim[vec, 1] <- napply(names, length)[vec]#
    out <- data.frame(obj.type, obj.size, obj.prettysize, obj.dim)#
    names(out) <- c("Type", "Size", "PrettySize", "Rows", "Columns")#
    if (!missing(order.by))#
        out <- out[order(out[[order.by]], decreasing=decreasing), ]#
    if (head)#
        out <- head(out, n)#
    out#
}#
#
# shorthand#
lsos <- function(..., n=10) {#
    .ls.objects(..., order.by="Size", decreasing=TRUE, head=TRUE, n=n)#
}#
#
lsos()
temp <- matrix(nrows = 100, ncols = 100)
temp <- matrix(nrow = 100, ncol = 100)
lsos()
temp <- matrix(nrow = 1000, ncol = 1000)
lsos()
temp <- matrix(nrow = 1000, ncol = 10000)
lsos()
temp <- matrix(nrow = 10000, ncol = 10000)
lsos()
rm(temp)
lsos()
400 * 4
?cor
cor
?.Internal
.Internal(cor)
.Internal(cor(x, y, na.method, FALSE))
.Internal
.Internalmysqrt <- .Primitive("sqrt")
mysqrt <- .Primitive("sqrt")
rm(.Internalmysqrt)
mysqrt
c
.Internal # this one *must* be primitive!#
`if` # need backticks
.Primitive("sqrt")
.Primitive("cor")
temp <- matrix(nrow = 1000, ncol = 1000)
temp <- matrix(nrow = 10000, ncol = 1000)
temp <- matrix(nrow = 10000, ncol = 10000)
temp <- matrix(nrow = 100, ncol = 1000)
temp <- matrix(nrow = 1m ncol = 1)
temp <- matrix(nrow = 1m ncol = 1)
temp <- matrix(nrow = 1, ncol = 1)
q()
